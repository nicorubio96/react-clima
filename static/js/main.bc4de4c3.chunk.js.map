{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","App","consultar","guardarResultado","useEffect","a","url","fetch","respuesta","json","conAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bc4de4c3.chunk.js","sourcesContent":["import React from 'react';\nconst Header =({titulo})=>{\n    return (\n        <nav>\n            <div className=\"nav-wrappen green darken-3\">\n             <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\n\n            </div>\n\n        </nav>\n    );\n}\n\nexport default Header;","import React, { useState } from 'react';\n\n\n\nconst Formulario = ({busqueda,guardarBusqueda,guardarConsultar}) => {\n\n   \n    const [error, guardarError] = useState(false);\n\n    // extraer ciudad y pais\n    const { ciudad, pais } = busqueda;\n\n    // función que coloca los elementos en el state\n    const handleChange = e => {\n        // actualizar el state\n        guardarBusqueda({\n            ...busqueda,\n            [e.target.name] : e.target.value\n        });\n    }\n\n    // Cuando el usuario da submit al form\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        // validar\n        if(ciudad.trim() === '' || pais.trim() === '') {\n            guardarError(true);\n            return;\n        }\n        guardarError(false);\n        guardarConsultar(true);\n\n\n    }\n\n    return ( \n        <form\n            onSubmit={handleSubmit}\n        >\n            {error ? <p className=\"red darken-4\">todos los campos son obligatorios</p> : null}\n            \n            <div className=\"input-field col s12\">\n                <input\n                    type=\"text\"\n                    name=\"ciudad\"\n                    id=\"ciudad\"\n                    value={ciudad}\n                    onChange={handleChange}\n                />\n                <label htmlFor=\"ciudad\">Ciudad: </label>\n            </div>\n\n            <div className=\"input-field col s12\">\n                <select\n                    name=\"pais\"\n                    id=\"pais\"\n                    value={pais}\n                    onChange={handleChange}\n                >\n                    <option value=\"\"> Seleccione un país </option>\n                    <option value=\"AR\">Argentina</option>\n                    <option value=\"BR\">Brasil</option>\n                    <option value=\"CL\">Chile</option>\n                    <option value=\"CO\">Colombia</option>\n                    <option value=\"CR\">Costa Rica</option>\n                    <option value=\"ES\">España</option>\n                    <option value=\"US\">Estados Unidos</option>\n                    <option value=\"MX\">México</option>\n                    <option value=\"PE\">Perú</option>\n                  \n                \n                \n                \n                   \n                </select>\n                <label htmlFor=\"pais\">País: </label>\n            </div>\n\n            <div className=\"input-field col s12\">\n                <input  \n                    type=\"submit\"\n                    value=\"Buscar Clima\"\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\n                />\n            </div>\n        </form>\n     );\n}\n\n\n \nexport default Formulario;","import React from 'react';\n\nconst Clima = ({resultado}) => {\n    //la api de openwather no es tan precisa con las temperaturas minimas y maximas\n   \n    const {name,main}= resultado;\n    if(!name)return null;\n    const kelvin = 273.15;\n    return ( <div className=\"card-panel white col s12\">\n        <div className=\"black-text\">\n            <h2>El clima de {name} es : </h2>\n            <p className=\"temperatura\">\n                {parseFloat(main.temp - kelvin,10).toFixed(1)}<span>&#x2103;</span>\n\n            </p>\n\n        \n\n          \n        </div>\n\n            </div>);\n}\n \nexport default Clima;","import React,{Fragment,useState,useEffect} from 'react';\nimport Header from './components/Header.js'\nimport Formulario from './components/Formulario.js'\nimport Clima from './components/Clima.js'\n\nfunction App() {\n\n  //state del formulario\n  const [busqueda,guardarBusqueda]= useState({\n    ciudad:'', \n    pais:''\n\n})\n\nconst [consultar,guardarConsultar] =useState(false);\nconst [resultado,guardarResultado] = useState({})\nconst {ciudad,pais}=busqueda;\n\nuseEffect(()=>{\n  const conAPI = async() =>{\n    if(consultar){\n      const id= '4200cd3265fbfb9934a8279f3039c568'\n      const url =`https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${id}`;\n    \n      const respuesta = await fetch(url)\n      const resultado = await respuesta.json();\n      guardarResultado(resultado);\n      guardarConsultar(false);\n\n    }\n  }\n  conAPI();\n\n\n},[consultar])\n\n  return (\n    <Fragment>\n      <Header\n      titulo=\"Clima\"\n      /> \n\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n                <Formulario\n                  busqueda={busqueda}\n                  guardarBusqueda={guardarBusqueda}\n                  guardarConsultar={guardarConsultar}\n                />\n            </div>\n            <div className=\"col m6 s12\">\n                <Clima\n                resultado={resultado}\n                />\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n\n    </Fragment>\n    \n  );\n}\n\nexport default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}